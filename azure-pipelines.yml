# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'release'
  major: 0
  minor: 0
  patch: $[counter(format('{0}.{1}', $(major), $(minor)), 2)]

steps:
- script: |
    dotnet build -c $(buildConfiguration)
    dotnet test jkulubya.lobrc.test -c $(buildConfiguration)
    dotnet pack src/jkulubya.lobrc.csproj -c $(buildConfiguration) /p:PackageVersion=$(major).$(minor).$(patch) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: |
    dotnet build -c $(buildConfiguration)
    dotnet test jkulubya.lobrc.test -c $(buildConfiguration)
    dotnet pack src/jkulubya.lobrc.csproj -c $(buildConfiguration) /p:PackageVersion=$(major).$(minor).$(patch) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))

- script: |
    dotnet build -c $(buildConfiguration)
    dotnet test jkulubya.lobrc.test -c $(buildConfiguration)
  condition: and(succeeded(), and((ne(variables['Build.SourceBranch'], 'refs/heads/master')), (ne(variables['Build.SourceBranch'], 'refs/heads/dev'))))
